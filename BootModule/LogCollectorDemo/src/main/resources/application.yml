server:
  port: 8384

logging:
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(%8X{traceId:-unknown}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(:){faint} %m%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} %5p %8X{traceId:-unknown} --- [%t] : %m%n"
  file:
    path: D:\logCollectorDemo

config:
  # 待扫描的目录，多个使用“;”进行分隔
  dirs-to-scan: D:\logCollectorDemo
  # 当天日志文件的命名
  log-today-file-name: spring.log
  # 历史日志文件的命名，使用<?TimeFormat?>作时间占位
  log-history-file-name: sysAudit.log.<?yyyy-MM-dd?>.log
  # 日志的字符集
  log-charset: gbk
  # 行解析的正则
  #  line-parse-regex: ^(?<time>.{10} .{8})\.\d{3}\s+(?<level>INFO|WARN|ERROR) (?<uid>.+?) --- \[\s*(?<thread>.+?)] :\s{1}(?<content>.*)
  #  line-parse-regex: ^\[(?<time>.{17})] \[(?<level>INFO|WARN|ERROR)] \[(?<uid>.*?)] \[(?<thread>.+?)] \{(?<pos>.+?)}-(?<content>.*)
  line-parse-regex: "^(?<time>.{19})\\s+(?<level>INFO|WARN|ERROR) (?<uid>.*?) --- \\[(?<thread>.+?)] : (?<content>.*)"
  # 标签解析的正则
  tag-parse-regex: ^TAG-(?<key>.+?)-(?<value>.*)
  # 没有uid时，使用的占位符
  no-uid-placeholder: unknown
  # 行的时间格式
  line-time-format: yyyy-MM-dd HH:mm:ss
  # 需要建立索引的标签，多个使用“;”进行分隔
  tags-to-index: url;user
  # 当新记录与旧记录间不超过指定字节数时，将新记录合并至旧记录
  max-bytes-gap-to-merge: 10000
  # 默认一次查询，最多返回的结果条数
  default-max-result-count: 30
  # 当日志行没有uid时，每条查询结果允许包含的最大行数
  max-lines-per-result-with-no-uid: 20
  # 查询结果保留的时间
  result-retain-sec: 10